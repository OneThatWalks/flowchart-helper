{
	// Place your flowchart-helper workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create component with redux props": {
		"scope": "typescriptreact",
		"prefix": "createReactReduxComponent",
		"body": [
			"import React from 'react';",
			"import { connect } from 'react-redux';",
			"",
			"export interface ${1:ComponentName}Props {",
			"}",
			"",
			"interface StateProps {",
			"}",
			"",
			"interface DispatchProps {",
			"}",
			"",
			"type Props = StateProps & DispatchProps & $1Props;",
			"",
			"interface State {",
			"}",
			"",
			"class $1 extends React.Component<Props, State> {",
			"",
			"    constructor(props: Props) {",
			"        super(props);",
			"    }",
			"",
			"    render() {",
			"        return ($0);",
			"    }",
			"",
			"}",
			"",
			"function mapStateToProps(state: StateProps, ownProps: $1Props): StateProps & $1Props {",
			"    return {",
			"    };",
			"}",
			"",
			"export default connect(mapStateToProps, {})($1);"
		],
		"description": "Will create a react component with redux connector"
	}
}